#+TITLE: LiquidNeko

* 前言
LiquidNeko，是一个以统一生态并确保兼容性为目标的，多平台兼容的，灵活的去中心化协议。LiquidNeko哲学的核心是万物皆可猫咪，既不依赖和受限于各个生态，又能优雅地兼容和游走于各个生态之间。
LiquidNeko是为了解决因生态不统一导致的各个应用之间的割裂问题而产生的一种解决方案。

*WIP声明：目前LiquidNeko仍处于早期开发阶段，许多内容尚不稳定，不建议直接用于生产环境。*

* LiquidNeko哲学
** 万物皆可模块化
理想情况下，一切程序都应该被拆分成一个个有条理、可拼装的模块。
** 万物皆可去中心化
一切程序从部署到落实都应该是去中心化的，这样单个节点的瘫痪并不会导致全局瘫痪。
** 万物皆可自动化
理想情况下，任何程序都应当自动化，仅依据客户的简单指令完成复杂操作，尽可能避免用户反复执行相同操作。
** 万物皆可简单化
任何程序都应当对用户提供尽可能简单易懂的操作接口，而非大量复杂抽象的文档。
** 万物皆可定制
理想情况下，任何程序的任何部件都应当是可定制和自由变更的，除非出于安全考虑设置加密或只读模块。
** 万物皆可互联
理想情况下，任何程序或任何操作系统都应当实现天然的的互联和互通，以确保用户工作流完全无割裂的体验。
** 万物皆为数据
理想情况下，所有内容都应是结构清晰、易读易处理的数据，而非黑盒或不可视的状态。
** 万物皆为上下文
一切程序或模块，应当尽可能仅通过单一的上下文接口实现通信，最大程度上减少耦合。
** 万物皆可标签化
理想情况下，一切数据和功能模块都应支持标签化组织，减少用户认知负担。
** 万物皆可猫咪
理想情况下，任何程序都应当像液态的猫咪一样，独立于任何生态，又尽可能统一地对任何生态提供兼容。
详见生态独立和生态统一原则。
** 模块单一职责原则
任何模块都应当只专注于实现一件事，并将这件事做到极致。
** 生态独立原则
任何程序都应该独立于生态，不完全从属于一个单独生态，并对不同生态提供尽可能多的兼容性。
** 生态统一原则
在生态独立原则的基础上，同生态内的程序应当尽可能与当前生态统一，避免与所在生态割裂。
** 公众服务原则
任何程序都应该不因身份、地位、学历、国籍、种族、年龄或其它任何条件歧视用户，对任何有需求的用户提供符合其习惯的使用方式，或至少提供灵活变更操作习惯的接口。
** 最小负担原则
任何程序都应当尽可能给用户最小的使用负担，尽可能降低用户的学习、认知和使用的成本。用简洁、明确清晰的教程替代复杂冗长的文档，用简单的命令和极简的界面代替复杂花哨的操作界面。
** 最优效率原则
在满足公众服务和最小负担原则的基础上，任何程序都应当尽可能追求提升任何用户的效率。
** 最小耦合原则
任何模块或者程序都应当尽可能减少对其它程序和模块之间的耦合，包括库调用、依赖管理等封装实现。
** 接口公开原则
任何程序都应当多地可能对其它程序开放每可由用户自定义的操作环节的接口，以文本形式传递并允许任何程序接入。
** 最简实现原则
任何程序或模块都应当尽可能追求最简单的实现，避免复杂实现。
** 最优性能原则
在最简实现原则的基础上，任何程序或模块都应当具备最优的性能优化，能在任何主流甚至低功耗设备上流畅运行。
** 安全责任原则
任何程序应当以任何形式的安全，不论进程安全还是系统安全为重大责任，并及时和尽快修复可能导致安全隐患的重大漏洞。
** 中庸之道原则
在前述原则发生冲突的情况下，任何程序应当选择折中方案均衡处理，根据需求灵活调整实现方式。

