#+TITLE: LiquidNeko架构

* 架构图
#+BEGIN_SRC plantuml :file liquidneko_strcut.png
(Neko程序1) <-> (Sexp Neko1)
(Sexp Neko1) <->  (Neko Sexp)
(Neko Sexp) <-> (Sexp Neko2)
(Sexp Neko2) <-> (Neko程序2)
(Neko Sexp) --> (NekoScript) : 执行
#+END_SRC

#+RESULTS:
[[file:liquidneko_strcut.png]]

* 架构思路
** Neko
*** 定义
作为LiquidNeko架构中最基本的构成单元，代表一个具有独立能力、生命周期与接口声明的实体。
一个 Neko 可以等价于传统意义上的程序、模块、服务节点，甚至是一个封装外部程序的适配器。
Neko不依赖中央注册系统，具有自声明、自组织的能力。它可以是本地的、远程的、静态的或临时的。
不同Neko可以有不同分工，但所有Neko都遵循一个统一的标准通信。
Neko是NekoLisp中的最小单元，每个Neko都通过一个或多个SexpNeko（解释猫），实现相互通信。
*** 结构
一个Neko，至少应当拥有下面的实现：
1. 传递S表达式的统一通信接口。
2. 存储S表达式的数组。
3. 实现或接入一个符合NekoLisp语法标准的S表达式解释器。
4. 对其它Neko的依赖的声明。
*** 原理
通过要求每个程序来实现一个NekoLisp解释器，可以很快捷地让这个程序解析并接入NekoLisp的语法，这样以来每个程序只需要实现一个面向NekoLisp的扩展，就能互通配置，并都能在这之上运行NekoLisp的程序。
通过这点，Liquid Neko的协议的基础得以确定，所有LiquidNeko程序可以看做是一个Neko。
此外，每个Liquid Neko脚本，也可以看作是一个Neko，因为LiquidNeko的脚本，也符合Neko实现的特征。

** 脚本猫(NekoScript)
*** 定义
NekoScript是一种特殊的Neko，它本身也可以作为S表达式的一部分，被其它Neko程序统一运行。
但是，NekoScript必须依赖SexpNeko运行，虽然默认不需要声明对SexpNeko的依赖，但调用各种库和不同程序实现时，依然需要在NekoLisp脚本里声明对其它Neko实现的依赖。

*** 文件
NekoScript一般是命名为.neko的文件，一个NekoScript也可以看做是一个依赖于SexpNeko的Neko程序。

*** 原理
所有LiquidNeko程序，都通过S表达式互通，且特定S表达式的方法通过各自的方式实现。
而NekoScript，则作为实现互通的桥梁，方便各个程序内部调用一套统一的脚本，来实现程序之间各个工作流的统一。

** 解释猫（Sexp Neko）
*** 定义
解释猫是负责解释并执行NekoLisp脚本的猫，通常承担执行和转换NekoLisp脚本的功能。
解释猫通常作为一个rust模块或库存在，供启动猫启动时调用和加载，最终再基于解释猫的解释功能运行各种neko lisp脚本。

一个解释猫承载的主要功能包括：
- S 表达式解析
- 词法/语法/求值器
- 内置标准库
*** 功能
- 1. 读取（Read）   → 把字符串变成语法结构（AST）
- 2. 分析（Parse）  → 把原始文本变成表达式树（S-expression）
- 3. 求值（Eval）   → 对表达式进行计算，返回结果
- 4. 环境（Env）    → 变量绑定、作用域、函数表
- 5. 宏适配         → 将启动猫有的宏和函数实现映射到自身。
- 6. 定义加载       → 将新定义的全局变量、宏、函数等加载到自身环境，方便调用模块提供的宏或函数。
- 7. 提供FFI调用    → 将FFI调用请求转映射到启动器接口。
- 8. 全局文件       → 将需要用到的文件加载到全局环境，以便所有Neko共享。
- 9. 解释器通信     → Sexp Neko还可以通过翻译猫或者别的方式，与别的Sexp Neko或其它Lisp解释器通过不同的通信协议实现通信，从而获得分布式部署的能力。

** 翻译猫（Translator Neko）
*** 定义
翻译猫是负责将别的语言脚本转译成NekoLisp语言的猫，通过对其它编程语言提供调用库，确保其它编程语言能正确解释为NekoLisp语言。

** 协调猫(Compositor Neko)
*** 定义
带有协调功能的猫，协调猫是多个不同的猫之间的上下文调度与聚合器。
协调猫包括但不限于内核猫、总线猫、调度猫等。
