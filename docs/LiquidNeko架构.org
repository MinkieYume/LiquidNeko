#+TITLE: LiquidNeko架构

* 架构图
#+BEGIN_SRC plantuml :file liquidneko_strcut.png
(Launcher Neko) -> (Sexp Neko):运行
(Sexp Neko) --> (Neko1)
(Sexp Neko) --> (Neko2)
(Neko1) --> (Compositor Neko):发出通信
(Neko2) <-- (Compositor Neko):接收通信
#+END_SRC

#+RESULTS:
[[file:liquidneko_strcut.png]]

* 架构思路
** Neko
*** 定义
作为LiquidNeko架构中最基本的构成单元，代表一个具有独立能力、生命周期与接口声明的实体。
一个 Neko 可以等价于传统意义上的程序、模块、服务节点，甚至是一个封装外部程序的适配器。
Neko不依赖中央注册系统，具有自声明、自组织的能力。它可以是本地的、远程的、静态的或临时的。
不同Neko可以有不同分工，但所有Neko都遵循一个统一的标准通信。
Neko是NekoLisp中的最小单元，每个Neko都通过一个或多个SexpNeko（解释猫），实现相互通信。
*** 结构
一个Neko，至少应当拥有下面的实现：
1. 传递S表达式的统一通信接口。
2. 存储S表达式的字典。
3. 对其它Neko的依赖的声明。

** 启动猫（Launcher Neko）
*** 定义
启动器是负责引导整个 LiquidNeko 系统运行的入口 Neko。
它是系统中第一个被激活的Neko，负责初始化环境、加载调度器、注册模块或进入运行态。

启动器本身并不限定形式或层级，它可以是：
- 一个 Linux 用户空间程序；
- 一个桌面环境中的自动启动模块；
- 一个嵌入式设备的初始化脚本；
- 甚至是操作系统内核或 BIOS 的入口点。

启动猫可以提供一组 `(platform-capability ...)` 宏或结构，用于向解释猫声明当前支持的系统能力（如 :io, :clock, :fs）。

*** 功能
- 负责作为总入口启动。
- 可以嵌套多个启动猫继承启动环境。
- 为解释猫提供基础的宏和函数实现，包括平台IO、平台输入、时间基准、底层内存调用、底层硬编码结构
- 为解释猫提供当前操作系统或运行环境支持的其它宏或函数实现。

** 解释猫（Sexp Neko）
*** 定义
解释猫是负责解释并执行NekoLisp脚本的猫，是整个LiquidNeko系统的核心骨架和通用语言。
解释猫通常作为一个rust模块或库存在，供启动猫启动时调用和加载，最终再基于解释猫的解释功能运行各种neko lisp脚本。

一个解释猫承载的主要功能包括：
- S 表达式解析
- 词法/语法/求值器
- 内置标准库
*** 功能
- 1. 读取（Read）   → 把字符串变成语法结构（AST）
- 2. 分析（Parse）  → 把原始文本变成表达式树（S-expression）
- 3. 求值（Eval）   → 对表达式进行计算，返回结果
- 4. 环境（Env）    → 变量绑定、作用域、函数表
- 5. 宏适配         → 将启动猫有的宏和函数实现映射到自身。
- 6. 定义加载       → 将新定义的全局变量、宏、函数等加载到自身环境，方便调用模块提供的宏或函数。
- 7. 提供FFI调用    → 将FFI调用请求转映射到启动器接口。
- 8. 全局文件       → 将需要用到的文件加载到全局环境，以便所有Neko共享。
- 9. 解释器通信     → Sexp Neko还可以通过翻译猫或者别的方式，与别的Sexp Neko或其它Lisp解释器通过不同的通信协议实现通信，从而获得分布式部署的能力。

** 翻译猫（Translator Neko）
*** 定义
翻译猫是负责将别的语言脚本转译成NekoLisp语言的猫，通过对其它编程语言提供调用库，确保其它编程语言能正确解释为NekoLisp语言。

** 协调猫(Compositor Neko)
*** 定义
带有协调功能的猫，协调猫是多个不同的猫之间的上下文调度与聚合器。
协调猫包括但不限于内核猫、总线猫、调度猫等。
